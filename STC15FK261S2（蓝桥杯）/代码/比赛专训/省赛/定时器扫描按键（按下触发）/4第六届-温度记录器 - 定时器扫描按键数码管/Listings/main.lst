C51 COMPILER V9.59.0.0   MAIN                                                              03/20/2023 21:27:08 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\KEIL\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main.ls
                    -t) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "LED.h"
   2          #include "RB.h"
   3          #include "DS18B20.h"
   4          #include "CLOCK.h"
   5          #include "Timer.h"
   6          #include "Nixie.h"
   7          #include "Delay.h"
   8          #include "KEY.h"
   9          unsigned char code Donot_SMG[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};
  10          unsigned char code not_SMG[]={0X40,0X79,0X24,0X30,0X19,0X12,0X02,0X78,0X00,0X10};
  11          unsigned char Time[]={0X50,0X59,0X23};    //秒，分，时(BCD码表示)
  12          
  13          
  14          unsigned char Col_T[10];    //存储采集到的10个温度数据
  15          unsigned char Show_state;   //界面显示（0-参数设置界面  1-时钟显示界面）
  16          unsigned char Interval=1;   //采集时间间隔（1s、5s、30s、60s）
  17          unsigned char Col_Interval;   //确认采集时间
  18          unsigned char i;
  19          unsigned char index;    //采集到的温度的索引值（0-9）
  20          
  21          unsigned char KeyNum;
  22          bit Col_flag;   //收集温度标志（每收集一次温度成功后清除）
  23          bit Remind_symbol;    //提示符号显示状态
  24          bit Col_state;    //收集温度状态（1-开始收集  0-停止收集）
  25          bit LED_flag;   //LED1状态（0-熄灭  1-点亮）
  26          bit LED_state;    //LED2状态（0-熄灭  1-点亮）
  27          
  28          void Iniy_Sys(void)
  29          {
  30   1        LED_Control(0X00);
  31   1        RB_Control(0X00);
  32   1        P2&=0X1F;//锁存
  33   1      }
  34          
  35          void USE_DS18B20(void)
  36          {
  37   1        if(Col_flag==1)   //Col_flag标志位在中断中置1，所以定时中断程序不会扰乱温度的采集
  38   1        {
  39   2          DS18B20_ConvertT();
  40   2          Col_T[i]=DS18B20_ReadT();
  41   2          i++;
  42   2          Col_flag=0;
  43   2        }
  44   1      }
  45          
  46          void USE_KEY(void)
  47          {
  48   1        KeyNum=KEY();
  49   1        
  50   1        if(KeyNum==4)   //S4按下
  51   1        {
  52   2          KeyNum=0;
  53   2          if(Show_state==0)
  54   2          {
C51 COMPILER V9.59.0.0   MAIN                                                              03/20/2023 21:27:08 PAGE 2   

  55   3            if(Interval==1){Interval=5;}
  56   3            else if(Interval==5){Interval=30;}
  57   3            else if(Interval==30){Interval=60;}
  58   3            else if(Interval==60){Interval=1;}
  59   3          }
  60   2        }
  61   1        if(KeyNum==5)   //S5按下
  62   1        {
  63   2          if(Show_state==0)
  64   2          {
  65   3            Show_state=1;   //进入时钟显示界面
  66   3            Col_state=1;    //开始收集温度
  67   3          }
  68   2        }
  69   1        if(KeyNum==6)   //S6按下
  70   1        {
  71   2          if(Show_state==2)
  72   2          {
  73   3            LED_flag=0;
  74   3            index++;
  75   3            if(index>9){index=0;}
  76   3          }
  77   2        }
  78   1        if(KeyNum==7)   //S7按下
  79   1        {
  80   2          LED_flag=0;
  81   2          Show_state=0;   //进入参数设置页面
  82   2          Interval=1;   //恢复为默认采集时间间隔
  83   2        }
  84   1      }
  85          
  86          void USE_SMG(void)
  87          {
  88   1        if(Show_state==0)   //参数设置界面
  89   1        {
  90   2          Nixie_SetBuf(0,0XFF); 
  91   2          Nixie_SetBuf(1,0XFF);
  92   2          Nixie_SetBuf(2,0XFF);
  93   2          Nixie_SetBuf(3,0XFF);
  94   2          Nixie_SetBuf(4,0XFF);
  95   2          
  96   2          Nixie_SetBuf(5,0XBF);
  97   2          Nixie_SetBuf(6,Donot_SMG[Interval/10]);
  98   2          Nixie_SetBuf(7,Donot_SMG[Interval%10]);
  99   2        }
 100   1        else if(Show_state==1)    //时钟显示界面
 101   1        {
 102   2          Nixie_SetBuf(0,Donot_SMG[Time[2]/16]);    //除以16是因为是BCD码
 103   2          Nixie_SetBuf(1,Donot_SMG[Time[2]%16]);
 104   2          Nixie_SetBuf(3,Donot_SMG[Time[1]/16]);
 105   2          Nixie_SetBuf(4,Donot_SMG[Time[1]%16]);
 106   2          Nixie_SetBuf(6,Donot_SMG[Time[0]/16]);
 107   2          Nixie_SetBuf(7,Donot_SMG[Time[0]%16]);
 108   2          if(Remind_symbol==0)
 109   2          {
 110   3            Nixie_SetBuf(2,0XBF);
 111   3            Nixie_SetBuf(5,0XBF);
 112   3          }
 113   2          else
 114   2          {
 115   3            Nixie_SetBuf(2,0XFF);
 116   3            Nixie_SetBuf(5,0XFF);
C51 COMPILER V9.59.0.0   MAIN                                                              03/20/2023 21:27:08 PAGE 3   

 117   3          }
 118   2        }
 119   1        else if(Show_state==2)    //温度采集显示界面
 120   1        {
 121   2          Nixie_SetBuf(0,0XBF);
 122   2          Nixie_SetBuf(1,Donot_SMG[index/10]);    
 123   2          Nixie_SetBuf(2,Donot_SMG[index%10]);
 124   2          Nixie_SetBuf(3,0XFF);
 125   2          Nixie_SetBuf(4,0XFF);
 126   2          Nixie_SetBuf(5,0XBF);
 127   2          Nixie_SetBuf(6,Donot_SMG[Col_T[index]/10]);   //显示采集的温度数据
 128   2          Nixie_SetBuf(7,Donot_SMG[Col_T[index]%10]);
 129   2        }
 130   1      }
 131          
 132          void USE_LED(void)
 133          {
 134   1        if(LED_state==1)
 135   1        {
 136   2          LED_Control(0X01);
 137   2        }
 138   1        else{LED_Control(0X00);}
 139   1        
 140   1      }
 141          
 142          /*1ms的中断函数*/
 143          void Timer0_Routine(void) interrupt 1
 144          {
 145   1        static unsigned int T0_count;
 146   1        static unsigned int T0_count1;
 147   1        static unsigned char smg_count;
 148   1        static unsigned char key_count;
 149   1        static unsigned int led_cnt;
 150   1        
 151   1          /*扫描数码管和按键*/
 152   1        smg_count++;
 153   1        key_count++;
 154   1        if(smg_count==2)
 155   1        {
 156   2          smg_count=0;
 157   2          Nixie_Loop();
 158   2        }
 159   1        if(key_count==10)
 160   1        {
 161   2          key_count=0;
 162   2          Key_Loop();
 163   2        }
 164   1        
 165   1        if(Show_state==1)
 166   1        {
 167   2          T0_count++;
 168   2          if(T0_count==1000)    //达到1s
 169   2          {
 170   3            Remind_symbol=~Remind_symbol;
 171   3            T0_count=0;
 172   3          }
 173   2        }
 174   1      
 175   1        if(Col_flag==0)   //防止一次温度数据没有采集完开始了第二次采集
 176   1        {
 177   2          if(Col_state==1)
 178   2          {
C51 COMPILER V9.59.0.0   MAIN                                                              03/20/2023 21:27:08 PAGE 4   

 179   3            T0_count1++;
 180   3            if(T0_count1==(Interval*1000))    //达到收集1次温度的时间
 181   3            {
 182   4              if(Col_Interval==Interval*10)
 183   4              {
 184   5                Col_state=0;    //停止收集
 185   5                Col_Interval=0;   //收集间隔时间清零
 186   5                i=0;    //自增变量清除
 187   5                Show_state=2;   //收集完温度进入温度采集显示界面
 188   5                LED_flag=1;
 189   5              }
 190   4              T0_count1=0;
 191   4              Col_flag=1;//收集温度标志
 192   4              Col_Interval+=Interval;
 193   4            }
 194   3          }
 195   2        }
 196   1        
 197   1        if(LED_flag==1)
 198   1        {
 199   2          led_cnt++;
 200   2          if(led_cnt<500)
 201   2          {LED_state=1;}
 202   2          else {LED_state=0;}
 203   2          if(led_cnt==1000)led_cnt=0;
 204   2        }else {LED_state=0;}
 205   1      }
 206          
 207          void main(void)
 208          {
 209   1        Iniy_Sys();
 210   1        Timer0Init();
 211   1        Write_time(Time);
 212   1        DS18B20_ConvertT();//上电第一次先转换一次数据，防止一上电数码管不能立马显示正常的温度数据
 213   1        Delay1000ms();//等待温度转换完成再上电显示
 214   1        while(1)
 215   1        {
 216   2          EA=0;
 217   2          USE_LED();
 218   2          EA=1;
 219   2          Read_time(Time);
 220   2          USE_KEY();
 221   2          USE_DS18B20();
 222   2          USE_SMG();
 223   2        }
 224   1      }
 225          /*调用LED函数将中断关闭，中断会影响LED的显示*/
 226          /*
 227            本题中温度采集已经与中断程序形成前后台程序且采集一次温度的时间大于100ms（最低为0.1s），所以中断程序不会影
             -响onewire时序的数据传输。
 228            本题中中断并没有恰好没有影响时间的读取。当读取时间出现问题时只能在中断中置标志位达到50ms读取一次时间值。
 229          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    797    ----
   CONSTANT SIZE    =     20    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
C51 COMPILER V9.59.0.0   MAIN                                                              03/20/2023 21:27:08 PAGE 5   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
