C51 COMPILER V9.59.0.0   MAIN                                                              03/13/2023 00:00:32 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\KEIL\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main.ls
                    -t) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "LED.h"
   2          #include "RB.h"
   3          #include "Nixie.h"
   4          #include "KEY.h"
   5          #include "Ds18B20.h"
   6          #include "Timer.h"
   7          #include "Delay.h"
   8          
   9          /*Ê¹ÓÃµ½µÄÓ²¼ş£ºLED¡¢¼ÌµçÆ÷¡¢ÊıÂë¹Ü¡¢¾ØÕó¼üÅÌ¡¢DS18B20ÎÂ¶È´«¸ĞÆ÷*/
  10          unsigned char code Nodot_SMG[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};
  11          unsigned char code dot_SMG[]={0X40,0X79,0X24,0X30,0X19,0X12,0X02,0X78,0X00,0X10};
  12          
  13          unsigned char KeyNum;
  14          unsigned char T_Int;
  15          unsigned char T_Max=30;   //ÏµÍ³Ä¬ÈÏÉÏÏŞ30£¨×î´ó99£©
  16          unsigned char T_Min=20;   //ÏµÍ³Ä¬ÈÏÏÂÏŞ20£¨×îĞ¡0£©
  17          unsigned char T_Scope;    //ÎÂ¶ÈÇø¼ä£¨0~2£©
  18          unsigned char Interface;  //ÏÔÊ¾½çÃæ
  19          unsigned char T_Limit[4];   //¶¨ÒåÊäÈëÎÂ¶ÈãĞÖµÊı×é
  20          unsigned char temp;
  21          //unsigned int T1_count2;
  22          unsigned int T0_Count;
  23          unsigned char T1_count0;
  24          unsigned char T1_count1;
  25          unsigned char led_temp;
  26          bit L2_State;
  27          bit L1_State;
  28          bit RELAY_State;
  29          bit T_flag;
  30          void Sys_Init(void)
  31          {
  32   1        LED_Control(0X00);    //¹Ø±ÕËùÓĞLED
  33   1        RB_Control(0X00);//¹Ø±Õ¼ÌµçÆ÷·äÃùÆ÷
  34   1        P2&=0X1F;//Ëø´æ
  35   1      }
  36          
  37          /*DS18B20ÎÂ¶È¶ÁÈ¡ÓëãĞÖµÅĞ¶Ïº¯Êı*/
  38          void USE_DS18B20(void)
  39          {
  40   1        /*ÌâÄ¿ÖĞÒªÇóÎÂ¶ÈÊı¾İ±£´æÎªÕûÊıÊı¾İ*/
  41   1        /*ÇÒÎÂ¶ÈãĞÖµÉèÖÃ·¶Î§Îª0~99£¬ËùÒÔ²»ÔÙ½øĞĞÕı¸ºÎÂ¶ÈÅĞ¶Ï*/
  42   1        
  43   1        if(T_flag==1)   //´ïµ½100ms¶ÁÈ¡Ò»´ÎÎÂ¶ÈÊı¾İ
  44   1        {
  45   2          T_flag=0;
  46   2          DS18B20_Convert();    
  47   2          T_Int=DS18B20_ReadT();
  48   2        }
  49   1        
  50   1        if(T_Int<T_Min&&T_Max>T_Min){T_Scope=0;RELAY_State=0;L2_State=0;}
  51   1        else if(T_Int<=T_Max&&T_Int>=T_Min&&T_Max>T_Min){T_Scope=1;RELAY_State=0;L2_State=0;}
  52   1        else if(T_Int>T_Max&&T_Max>T_Min){T_Scope=2;RELAY_State=1;L2_State=0;}
  53   1        else if(T_Max<=T_Min){T_Scope=10;RELAY_State=0;L1_State=0;L2_State=1;}    //10-¸ÃÊıÖµÃ»ÓĞÊ¹ÓÃ±íÊ¾´íÎóµÄÎÂ¶È
             -Çø¼ä
C51 COMPILER V9.59.0.0   MAIN                                                              03/13/2023 00:00:32 PAGE 2   

  54   1      }
  55          
  56          /*°´¼ü´¥·¢º¯Êı*/
  57          void USE_MatrixKEY(void)
  58          {
  59   1        KeyNum=MatrixKey()-1;   //ÒòÎªÓĞÊ¹ÓÃµ½0Õâ¸ö¼üÖµ
  60   1        
  61   1        if(KeyNum==10)    //ÉèÖÃ°´¼ü°´ÏÂ
  62   1        {
  63   2          if(Interface==0)
  64   2          {
  65   3            Interface=1;    //½øÈë²ÎÊıÉèÖÃ½çÃæ
  66   3          }   
  67   2          else if(Interface==1)
  68   2          {
  69   3            if(temp!=0)
  70   3            {
  71   4              T_Max=T_Limit[0]*10+T_Limit[1];   //±£´æÎÂ¶ÈÊı¾İ
  72   4              T_Min=T_Limit[2]*10+T_Limit[3];
  73   4              
  74   4              temp=0;
  75   4              T_Limit[0]=T_Limit[1]=T_Limit[2]=T_Limit[3]=0;    //±£´æÍêÎÂ¶ÈÊı¾İÒ²½«ÊäÈë²ÎÊıÇå³ı
  76   4            }   
  77   3            if(T_Max<=T_Min)//ÊäÈëÎÂ¶ÈÊı¾İ³ö´í£¬²»·µ»ØÎÂ¶ÈÏÔÊ¾½çÃæ£¬L2³£ÁÁ
  78   3            {
  79   4              Interface=1;          
  80   4            }
  81   3            else    //·µ»ØÎÂ¶ÈÏÔÊ¾½çÃæ
  82   3            {
  83   4              Interface=0;
  84   4            }   
  85   3          }   
  86   2        }
  87   1        
  88   1        if(Interface==1)    //ÔÚ²ÎÊıÉèÖÃ½çÃæÏÂ
  89   1        {
  90   2          if(KeyNum<10)   
  91   2          {
  92   3            if(temp<4)
  93   3            {
  94   4              T_Limit[temp++]=KeyNum;   //ÊäÈëÎÂ¶ÈÉÏÏÂÏŞ
  95   4            }
  96   3          }
  97   2          
  98   2          if(KeyNum==11)    //Çå³ı°´¼ü°´ÏÂ
  99   2          {
 100   3            T_Limit[0]=T_Limit[1]=T_Limit[2]=T_Limit[3]=0;
 101   3            temp=0;
 102   3          }
 103   2        }
 104   1      }
 105          
 106          /*ÊıÂë¹ÜÏÔÊ¾º¯Êı*/
 107          void USE_SMG(void)
 108          {
 109   1        if(Interface==0)
 110   1        {
 111   2          Nixie_SetBuf(0,0XBF);
 112   2          Nixie_SetBuf(1,Nodot_SMG[T_Scope]);
 113   2          Nixie_SetBuf(2,0XBF);
 114   2          
 115   2          Nixie_SetBuf(6,Nodot_SMG[T_Int/10]);
C51 COMPILER V9.59.0.0   MAIN                                                              03/13/2023 00:00:32 PAGE 3   

 116   2          Nixie_SetBuf(7,Nodot_SMG[T_Int%10]);
 117   2        }
 118   1        else if(Interface==1)
 119   1        {
 120   2          Nixie_SetBuf(0,0XBF);
 121   2          Nixie_SetBuf(5,0XBF);
 122   2          if(temp==1)
 123   2          {
 124   3            Nixie_SetBuf(1,Nodot_SMG[T_Limit[0]]);
 125   3          }
 126   2          else if(temp==2)
 127   2          {
 128   3            Nixie_SetBuf(1,Nodot_SMG[T_Limit[0]]);
 129   3            Nixie_SetBuf(2,Nodot_SMG[T_Limit[1]]);
 130   3          }
 131   2          else if(temp==3)
 132   2          {
 133   3            Nixie_SetBuf(1,Nodot_SMG[T_Limit[0]]);
 134   3            Nixie_SetBuf(2,Nodot_SMG[T_Limit[1]]);
 135   3            Nixie_SetBuf(6,Nodot_SMG[T_Limit[2]]);
 136   3          }
 137   2          else if(temp==4)
 138   2          {
 139   3            Nixie_SetBuf(1,Nodot_SMG[T_Limit[0]]);
 140   3            Nixie_SetBuf(2,Nodot_SMG[T_Limit[1]]);
 141   3            Nixie_SetBuf(6,Nodot_SMG[T_Limit[2]]);
 142   3            Nixie_SetBuf(7,Nodot_SMG[T_Limit[3]]);
 143   3          }
 144   2          else if(temp==0)
 145   2          {
 146   3            Nixie_SetBuf(1,0XFF);
 147   3            Nixie_SetBuf(2,0XFF);
 148   3            Nixie_SetBuf(6,0XFF);
 149   3            Nixie_SetBuf(7,0XFF);
 150   3          }
 151   2        }
 152   1      }
 153          
 154          /*LEDÏÔÊ¾º¯Êı*/
 155          void USE_LED(void)
 156          {
 157   1        if(L1_State==1&&L2_State==0){LED_Control(0X01);}
 158   1        else if(L1_State==0&&L2_State==1){LED_Control(0X02);}
 159   1        else {LED_Control(0X00);}
 160   1      }
 161          
 162          /*¼ÌµçÆ÷¿ª¹Øº¯Êı*/
 163          void USE_RB(void)
 164          {
 165   1        if(RELAY_State==1){RB_Control(0X10);} //´ò¿ª¼ÌµçÆ÷
 166   1        else{RB_Control(0X00);}   //¹Ø±Õ¼ÌµçÆ÷
 167   1      }
 168          
 169          
 170          /*¶¨Ê±Æ÷1ÖĞ¶Ïº¯Êı£¨1ms½øÒ»´ÎÖĞ¶Ï£©*/
 171          void Timer1_Routine(void) interrupt 3
 172          {
 173   1        static unsigned char T_Count;
 174   1        /*É¨ÃèÊıÂë¹ÜºÍ°´¼ü*/
 175   1        T1_count0++;
 176   1        T1_count1++;
 177   1        if(T1_count0==2)
C51 COMPILER V9.59.0.0   MAIN                                                              03/13/2023 00:00:32 PAGE 4   

 178   1        {
 179   2          T1_count0=0;
 180   2          Nixie_Loop();
 181   2        }
 182   1        if(T1_count1==20)
 183   1        {
 184   2          T1_count1=0;
 185   2          Key_Loop();
 186   2        }
 187   1        
 188   1            /*ÎÂ¶ÈãĞÖµµÄ´¦Àí*/
 189   1        if(T_Scope==0)
 190   1        {
 191   2          T0_Count++;
 192   2          if(T0_Count>=800)
 193   2          {
 194   3            T0_Count=0;
 195   3            L1_State=~L1_State;
 196   3          }
 197   2        }
 198   1        if(T_Scope==1)
 199   1        {
 200   2          T0_Count++;
 201   2          if(T0_Count>=400)
 202   2          {
 203   3            T0_Count=0;
 204   3            L1_State=~L1_State;
 205   3          }
 206   2        }
 207   1        if(T_Scope==2)
 208   1        {
 209   2          T0_Count++;
 210   2          if(T0_Count>=200)   //£¨ >= £©´óÓÚµÈÓÚµÄÄ¿µÄÊÇÒÔ·ÀÇĞ»»¹ı³ÌÖĞT_CountÊıÖµ³¬¹ıµ±Ç°ÏŞ¶¨Öµ
 211   2          {
 212   3            T0_Count=0;
 213   3            L1_State=~L1_State;
 214   3          }
 215   2        }
 216   1        T_Count++;
 217   1        if(T_Count==100)    //´ïµ½100ms
 218   1        {
 219   2          T_Count=0;
 220   2          T_flag=1;
 221   2        }
 222   1        
 223   1      
 224   1      }
 225          
 226          /*Ö÷º¯Êı*/
 227          void main(void)
 228          {
 229   1        Sys_Init();
 230   1        Timer1Init();
 231   1        DS18B20_Convert();
 232   1        Delay750ms();
 233   1        while(1)
 234   1        {
 235   2          EA=0;   //·ÀÖ¹ÖĞ¶ÏÓ°Ïì
 236   2          USE_LED();
 237   2          USE_RB();
 238   2          EA=1;
 239   2          USE_DS18B20();//100ms¶ÁÈ¡Ò»´ÎÎÂ¶ÈÊı¾İÇÒÓë¶¨Ê±ÖĞ¶Ï·Ö¿ª¹¤×÷£¬²»ÊÜ¶¨Ê±ÖĞ¶ÏÓ°Ïì¡£
C51 COMPILER V9.59.0.0   MAIN                                                              03/13/2023 00:00:32 PAGE 5   

 240   2          USE_SMG();
 241   2          USE_MatrixKEY();
 242   2        }
 243   1      }
 244          
 245          /*Óöµ½µÄÎÊÌâ£º*/
 246          /*
 247            1. DS18B20µ¥×ÜÏßĞ­Òé£ºÉÏµçµÚÒ»´ÎÏÈ×ª»»Ò»´ÎÊı¾İ´æÔÚÔİ´æÆ÷ÖĞ£¬´Ë¹ı³Ì×î¸ßĞèÒªÏûºÄ750ms¡£
 248            ÎªÁË±ÜÃâ²»¶ÏÊ¹ÓÃÑÓÊ±£¬ËùÒÔÏÈÉÏµç×ª»»Ò»´ÎÎÂ¶ÈÊı¾İ´æÔÚÔİ´æÆ÷ÖĞ¡£È»ºóÔÚÖ÷Ñ­»·ÖĞÔÙ´Î¿ªÆô×ª»»ÎÂ¶ÈºóÔÙ¶ÁÈ¡ÎÂ¶È£
             -¬´ËÊ±¶ÁÈ¡µÄÊÇµÚÒ»´Î×ª»»µÄÎÂ¶È¡£
 249          */
 250          /*
 251            2. ÓÉÓÚÈí¼şÄ£ÄâÊ±Ğò´«ÊäÊı¾İÊ±»á±»¶¨Ê±ÖĞ¶ÏÓ°Ïì£¬ËùÒÔ»áÊ¹ÊıÂë¹Ü³ÌĞò³öÏÖÉÁË¸ÏÖÏó¡£ËùÒÔÔÚ¶ÁÈ¡ÎÂ¶ÈÊı¾İÊ±¹Ø±ÕÖĞ
             -¶ÏÇÒ¼ÓÉÏ100msÎÈ¶¨ÎÂ¶ÈÊı¾İ¶ÁÈ¡¡£
 252            ½â¾ö·½·¨£ºÔÚÖĞ¶Ïº¯ÊıÖĞ¶¨Òå±êÖ¾±äÁ¿£¬µ±µ½´ï100msºó¸Ã±êÖ¾ÖÃ1ÔÚÖ÷Ñ­»·ÖĞ¶ÁÈ¡ÎÂ¶ÈÊı¾İ£¬ÕâÑù¿ÉÒÔÊ¡È¥100msµÄÑÓÊ±
             -ÇÒ±ÜÃâÁËÓëÖĞ¶Ï·¢ËÍ³åÍ»*/
 253          /*
 254            3. ÔÚ²Ù×÷LED¡¢¼ÌµçÆ÷¡¢·äÃùÆ÷µÄÊ±ºò£¬ÕıºÃÅöµ½¶¨Ê±Æ÷ÖĞ¶Ï£¬µ¼ÖÂP0¿ÚÊı¾İ²»ÎÈ¶¨£¬µ¼ÖÂLED¡¢¼ÌµçÆ÷¡¢·äÃùÆ÷Òì³£¡£
 255            ½â¾ö·½·¨£ºÔËĞĞµ½LEDºÍ¼ÌµçÆ÷·äÃùÆ÷µÄÊ±ºò²»´ò¿ªÖĞ¶Ï¡£
 256          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    799    ----
   CONSTANT SIZE    =     20    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
