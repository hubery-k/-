C51 COMPILER V9.59.0.0   MAIN                                                              06/07/2023 11:25:34 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\KEIL\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main.ls
                    -t) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          
   3          /***********变量定义*************/
   4          uc KeyNum;
   5          uc Dat_Interface;//数据子界面
   6          uc Dat_Interface_Son; //数据子子界面
   7          uc Distance_P=10;   //距离参数范围（10~80）
   8          uc Time_P=2;  //采集时间参数
   9          uc TP_temp=2; //采集时间临时变量
  10          uc DP_temp=10;  //采集距离临时变量
  11          uc Time[3]={0X01,0X20,0X20};
  12          int Distance;
  13          f adc;
  14          ui Max_Distance=0;
  15          ui Min_Distance=999;
  16          f Ave_Distance;
  17          ui Trg_Num;
  18          uc D_Num; //距离计次
  19          uc temp=1;
  20          
  21          
  22          bit temp_flag;
  23          bit Interface;
  24          bit P_Interface;
  25          bit Mode;
  26          bit CLOCK_Flag;
  27          bit ADC_Flag;
  28          bit SONIC_Flag;
  29          bit KEY_flag;
  30          bit C_Trg;  //触发模式触发采集
  31          bit F_Trg;  //定时模式触发采集
  32          bit State;  //亮、暗状态
  33          bit led_run;
  34          /***********硬件初始化函数*************/
  35          
  36          void Hardware_Init()
  37          {
  38   1        LED_Init();
  39   1        RB_Init();
  40   1        Timer0Init();
  41   1        DS1302_WriteTime(Time);
  42   1        Sonic_Init();
  43   1      }
  44          
  45          /***********任务处理函数*************/
  46          
  47          void Task_Processing()
  48          {
  49   1        if(CLOCK_Flag==1)
  50   1        {
  51   2          CLOCK_Flag=0;
  52   2          DS1302_ReadTime(Time);
  53   2          
  54   2          /*定时模式判断-秒值整除时间参数(由于1s可多次触发，所以加入限制条件)*/
C51 COMPILER V9.59.0.0   MAIN                                                              06/07/2023 11:25:34 PAGE 2   

  55   2          if(temp!=Time[0]/16*10+Time[0]%16){temp=Time[0]/16*10+Time[0]%16;temp_flag=1;}
  56   2          if(temp%Time_P==0&&temp_flag==1)
  57   2          {
  58   3            F_Trg=1;//触发一次
  59   3            temp_flag=0;
  60   3          }
  61   2        }
  62   1        if(ADC_Flag==1)
  63   1        {
  64   2          ADC_Flag=0;
  65   2          adc=(PCF8591_ReadAD(0)/255.0)*5.0;
  66   2          /*触发模式判断-亮到灭*/
  67   2          if(adc>2&&State==0)
  68   2          {
  69   3            State=1;
  70   3          }
  71   2          else if(adc<2&&State==1)
  72   2          {
  73   3            State=0;
  74   3            C_Trg=1;//触发一次
  75   3          }
  76   2        }
  77   1          
  78   1        if((Mode==0&&C_Trg==1) || (Mode==1&&F_Trg==1))
  79   1        {
  80   2          Trg_Num+=1;
  81   2          if(C_Trg==1){C_Trg=0;}
  82   2          if(F_Trg==1){F_Trg=0;}
  83   2          Distance=Sonic_Work();
  84   2          
  85   2          /*L5*/
  86   2          if(Mode==1)
  87   2          {
  88   3            if((Distance-Distance_P)>=0&&(Distance-Distance_P)<=5 || (Distance-Distance_P)>=-5&&(Distance-Distance_
             -P)<=0)
  89   3            {D_Num+=1;}
  90   3            else{D_Num=0;}
  91   3          }
  92   2          /*最大值*/
  93   2          if(Distance>Max_Distance)
  94   2          {
  95   3            Max_Distance=Distance;
  96   3          }
  97   2          /*最小值*/
  98   2          if(Distance<Min_Distance)
  99   2          {
 100   3            Min_Distance=Distance;
 101   3          }
 102   2          /*平均值*/
 103   2          if(Trg_Num==1){Ave_Distance=Distance;}
 104   2          else{Ave_Distance=(((f)(Distance+Ave_Distance))/2);}
 105   2          /*DAC输出功能*/
 106   2          if(Distance<=10){PCF8591_WriteDA((1/5.0)*255);}
 107   2          else if(Distance>10&&Distance<80)
 108   2          {
 109   3            PCF8591_WriteDA(((Distance-10)*(4.0/70)+1)/5.0*255);
 110   3          }
 111   2          else if(Distance>=80){PCF8591_WriteDA(255);}
 112   2        }
 113   1      }
 114          
 115          
C51 COMPILER V9.59.0.0   MAIN                                                              06/07/2023 11:25:34 PAGE 3   

 116          void USE_LED()
 117          {
 118   1        LED_Init();
 119   1        
 120   1        /*在数据界面下*/
 121   1        if(Interface==0)
 122   1        {
 123   2          if(Dat_Interface==0){L1=0;}
 124   2          else{L1=1;}
 125   2          if(Dat_Interface==1){L2=0;}
 126   2          else{L2=1;}
 127   2          if(Dat_Interface==2){L3=0;}
 128   2          else{L3=1;}
 129   2        }
 130   1        
 131   1        if(Mode==0){L4=0;L5=1;}
 132   1        else if(Mode==1)
 133   1        {
 134   2          L4=1;
 135   2          if(D_Num>=3){L5=0;}
 136   2          else{L5=1;}
 137   2        }
 138   1        if(State==1){L6=0;}
 139   1        else{L6=1;}
 140   1        P2&=0X1F;
 141   1      }
 142          /***********KEY应用函数*************/
 143          
 144          void USE_KEY()
 145          {
 146   1        if(KEY_flag==1)
 147   1        {
 148   2          KEY_flag=0;
 149   2          KeyNum=KEY();
 150   2          /*S4-界面按键*/
 151   2          if(KeyNum==4)
 152   2          {
 153   3            Interface=~Interface;
 154   3            
 155   3            Dat_Interface=0;
 156   3            P_Interface=0;
 157   3            Dat_Interface_Son=0;
 158   3            /*设置的参数，退出参数界面生效*/
 159   3            if(Interface==0)
 160   3            {
 161   4              Time_P=TP_temp;
 162   4              Distance_P=DP_temp;
 163   4            }
 164   3          }
 165   2          /*S5-切换按键*/
 166   2          if(KeyNum==5)
 167   2          {
 168   3            if(Interface==0)
 169   3            {
 170   4              Dat_Interface++;
 171   4              Dat_Interface%=3;
 172   4            }
 173   3            else if(Interface==1)
 174   3            {
 175   4              P_Interface=~P_Interface;
 176   4            }
 177   3          }
C51 COMPILER V9.59.0.0   MAIN                                                              06/07/2023 11:25:34 PAGE 4   

 178   2          /*S8-模式按键*/
 179   2          if(KeyNum==8)
 180   2          {
 181   3            if(Interface==0)
 182   3            {
 183   4              if(Dat_Interface==1)
 184   4              {
 185   5                Mode=~Mode;
 186   5              }
 187   4              else if(Dat_Interface==2)
 188   4              {
 189   5                Dat_Interface_Son++;
 190   5                Dat_Interface_Son%=3;
 191   5              }
 192   4            }
 193   3          }
 194   2          /*S9-调整按键*/
 195   2          if(KeyNum==9)
 196   2          {
 197   3            /*在参数设置界面下*/
 198   3            if(Interface==1)
 199   3            {
 200   4              /*在采集时间参数界面下*/
 201   4              if(P_Interface==0)
 202   4              {
 203   5                /*采集时间参数*/
 204   5                if(TP_temp==2){TP_temp+=1;}
 205   5                else if(TP_temp>=3&&TP_temp<9){TP_temp+=2;}
 206   5                else if(TP_temp==9){TP_temp=2;}
 207   5              }
 208   4              /*在距离参数界面下*/
 209   4              else
 210   4              {
 211   5                /*距离参数*/
 212   5                DP_temp+=10;
 213   5                if(DP_temp>80){DP_temp=10;}
 214   5              }
 215   4            }
 216   3          }
 217   2        }
 218   1      }
 219          
 220          /***********SMG应用函数*************/
 221          
 222          void USE_SMG()
 223          {
 224   1        /*数据显示界面*/
 225   1        if(Interface==0)
 226   1        {
 227   2          /*时间数据显示界面*/
 228   2          if(Dat_Interface==0)
 229   2          {
 230   3            Nixie_SetBuf(0,Nodot_SMG[Time[2]/16]);
 231   3            Nixie_SetBuf(1,Nodot_SMG[Time[2]%16]);
 232   3            Nixie_SetBuf(2,0xBF);
 233   3            Nixie_SetBuf(3,Nodot_SMG[Time[1]/16]);
 234   3            Nixie_SetBuf(4,Nodot_SMG[Time[1]%16]);
 235   3            Nixie_SetBuf(5,0xBF);
 236   3            Nixie_SetBuf(6,Nodot_SMG[Time[0]/16]);
 237   3            Nixie_SetBuf(7,Nodot_SMG[Time[0]%16]);
 238   3          }
 239   2          /*距离数据显示界面*/
C51 COMPILER V9.59.0.0   MAIN                                                              06/07/2023 11:25:34 PAGE 5   

 240   2          else if(Dat_Interface==1)
 241   2          {
 242   3            Nixie_SetBuf(0,0XC7); //标识符-L
 243   3            if(Mode==0){Nixie_SetBuf(1,Nodot_SMG[12]);}//标识符-C
 244   3            else{Nixie_SetBuf(1,Nodot_SMG[15]);}//标识符-F
 245   3            Nixie_SetBuf(2,0xFF);
 246   3            Nixie_SetBuf(3,0xFF);
 247   3      //      Nixie_SetBuf(4,0xFF);
 248   3            //测试用的（显示定时模式下相近距离参数+-5的触发次数）
 249   3            Nixie_SetBuf(4,Nodot_SMG[D_Num]);
 250   3            //用来测量AD值
 251   3      //      Nixie_SetBuf(5,dot_SMG[((ui)(adc*100))/100]);
 252   3      //      Nixie_SetBuf(6,Nodot_SMG[((ui)(adc*100))/10%10]);
 253   3      //      Nixie_SetBuf(7,Nodot_SMG[((ui)(adc*100))%10]);
 254   3            
 255   3            if(Distance>99){Nixie_SetBuf(5,Nodot_SMG[Distance/100]);}
 256   3            else{Nixie_SetBuf(5,0xFF);}
 257   3            if(Distance>9){Nixie_SetBuf(6,Nodot_SMG[Distance/10%10]);}
 258   3            else{Nixie_SetBuf(6,0xFF);}
 259   3            
 260   3            Nixie_SetBuf(7,Nodot_SMG[Distance%10]);
 261   3          }
 262   2          /*数据记录显示界面*/
 263   2          else if(Dat_Interface==2)
 264   2          {
 265   3            /*最大值界面*/
 266   3            if(Dat_Interface_Son==0)
 267   3            {
 268   4              Nixie_SetBuf(0,0X89); //标识符-H
 269   4              Nixie_SetBuf(1,~0X01);  //标识符上划线
 270   4              Nixie_SetBuf(2,0xFF);
 271   4              Nixie_SetBuf(3,0xFF);
 272   4              if(Max_Distance>999){Nixie_SetBuf(4,Nodot_SMG[Max_Distance/1000]);}
 273   4              else{Nixie_SetBuf(4,0xFF);}
 274   4              if(Max_Distance>99){Nixie_SetBuf(5,Nodot_SMG[Max_Distance/100%10]);}
 275   4              else{Nixie_SetBuf(5,0xFF);}
 276   4              if(Max_Distance>9){Nixie_SetBuf(6,Nodot_SMG[Max_Distance/10%10]);}
 277   4              else{Nixie_SetBuf(6,0xFF);}
 278   4              Nixie_SetBuf(7,Nodot_SMG[Max_Distance%10]);
 279   4            }
 280   3            /*平均值界面*/
 281   3            else if(Dat_Interface_Son==1)
 282   3            {
 283   4              Nixie_SetBuf(0,0X89); //标识符-H
 284   4              Nixie_SetBuf(1,~0X40);  //标识符中划线
 285   4              Nixie_SetBuf(2,0xFF);
 286   4              Nixie_SetBuf(3,0xFF);
 287   4              if((Ave_Distance*10)>999){Nixie_SetBuf(4,Nodot_SMG[((ui)(Ave_Distance*10))/1000]);}
 288   4              else{Nixie_SetBuf(4,0xFF);}
 289   4              if((Ave_Distance*10)>99){Nixie_SetBuf(5,Nodot_SMG[((ui)(Ave_Distance*10))/100%10]);}
 290   4              else{Nixie_SetBuf(5,0XFF);}
 291   4              if((Ave_Distance*10)>9){Nixie_SetBuf(6,dot_SMG[((ui)(Ave_Distance*10))/10%10]);}
 292   4              else{Nixie_SetBuf(6,0XFF);}
 293   4              
 294   4              Nixie_SetBuf(7,Nodot_SMG[((ui)(Ave_Distance*10))%10]);
 295   4            }
 296   3            /*最小值界面*/
 297   3            else if(Dat_Interface_Son==2)
 298   3            {
 299   4              Nixie_SetBuf(0,0X89); //标识符-H
 300   4              Nixie_SetBuf(1,~0X08);  //标识符下划线
 301   4              Nixie_SetBuf(2,0xFF);
C51 COMPILER V9.59.0.0   MAIN                                                              06/07/2023 11:25:34 PAGE 6   

 302   4              Nixie_SetBuf(3,0xFF);
 303   4              if(Min_Distance>999){Nixie_SetBuf(4,Nodot_SMG[Min_Distance/1000]);}
 304   4              else{Nixie_SetBuf(4,0xFF);}
 305   4              if(Min_Distance>99){Nixie_SetBuf(5,Nodot_SMG[Min_Distance/100%10]);}
 306   4              else{Nixie_SetBuf(5,0XFF);}
 307   4              if(Min_Distance>9){Nixie_SetBuf(6,Nodot_SMG[Min_Distance/10%10]);}
 308   4              else{Nixie_SetBuf(6,0XFF);}
 309   4              
 310   4              Nixie_SetBuf(7,Nodot_SMG[Min_Distance%10]);
 311   4            }
 312   3          }
 313   2      
 314   2        }
 315   1        /*参数设置界面*/
 316   1        else if(Interface==1)
 317   1        {
 318   2          /*采集时间设置界面*/
 319   2          if(P_Interface==0)
 320   2          {
 321   3            Nixie_SetBuf(0,0X8C); //标识符-P
 322   3            Nixie_SetBuf(1,Nodot_SMG[1]); //编号1
 323   3            Nixie_SetBuf(2,0xFF);
 324   3            Nixie_SetBuf(3,0xFF);
 325   3            Nixie_SetBuf(4,0xFF);
 326   3            Nixie_SetBuf(5,0xFF);
 327   3            Nixie_SetBuf(6,Nodot_SMG[TP_temp/10]);  //采集时间
 328   3            Nixie_SetBuf(7,Nodot_SMG[TP_temp%10]);
 329   3          }
 330   2          /*距离参数设置界面*/
 331   2          else if(P_Interface==1)
 332   2          {
 333   3            Nixie_SetBuf(0,0X8C); //标识符-P
 334   3            Nixie_SetBuf(1,Nodot_SMG[2]); //编号1
 335   3            Nixie_SetBuf(2,0xFF);
 336   3            Nixie_SetBuf(3,0xFF);
 337   3            Nixie_SetBuf(4,0xFF);
 338   3            Nixie_SetBuf(5,0xFF);
 339   3            Nixie_SetBuf(6,Nodot_SMG[DP_temp/10]);  //距离参数
 340   3            Nixie_SetBuf(7,Nodot_SMG[DP_temp%10]);
 341   3          }
 342   2        }
 343   1      }
 344          
 345          /***********主函数*************/
 346          
 347          void main()
 348          {
 349   1        Hardware_Init();
 350   1        while(1)
 351   1        {
 352   2          USE_SMG();
 353   2          USE_KEY();
 354   2          Task_Processing();
 355   2          if(led_run==1){led_run=0;USE_LED();}
 356   2        }
 357   1      }
 358          
 359          /***********中断函数*************/
 360          
 361          void Timer0_Routine() interrupt 1
 362          {
 363   1        static uc KEY_Count;
C51 COMPILER V9.59.0.0   MAIN                                                              06/07/2023 11:25:34 PAGE 7   

 364   1        static uc SMG_Count;
 365   1        static uc CLOCK_Count;
 366   1        static uc ADC_Count;
 367   1        
 368   1        led_run=1;
 369   1        KEY_Count++;
 370   1        if(KEY_Count==10)
 371   1        {
 372   2          KEY_Count=0;
 373   2          KEY_flag=1;
 374   2        }
 375   1        SMG_Count++;
 376   1        if(SMG_Count==2)
 377   1        {
 378   2          SMG_Count=0;
 379   2          Nixie_Loop();
 380   2        }
 381   1        CLOCK_Count++;
 382   1        if(CLOCK_Count==50)
 383   1        {
 384   2          CLOCK_Count=0;
 385   2          CLOCK_Flag=1;
 386   2        }
 387   1        ADC_Count++;
 388   1        if(ADC_Count==100)
 389   1        {
 390   2          ADC_Count=0;
 391   2          ADC_Flag=1;
 392   2        }
 393   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2169    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     32    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     12    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
